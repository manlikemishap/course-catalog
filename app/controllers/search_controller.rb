class SearchController < ApplicationController


  def index
  end


  def plan
  end



  def search

    dists = [:q, :w, :d].map { |dist| params[dist].nil? ? nil : dist }.compact
    attrs = params[:attrs].map { |a| Attr.find_by(name: a) }.compact if params[:attrs]
    divs = ["1", "2", "3"].map { |div| params[div].nil? ? nil : div.to_i }.compact
    #semester = params[:spring].nil? ? "Fall" : "Spring" if params[:spring].to_i != params[:fall].to_i

    semester = (params[:semester].nil? || params[:semester].downcase == "any") ? nil : params[:semester].downcase

    # Map course to score
    @results = {}

    t1 = Time.now

    if !params[:search].blank?
      search = Course.search do 
        fulltext params[:search], minimum_match: 1
        with(:semesters).any_of([semester]) if semester
      end
      search.each_hit_with_result do |hit, course|
        if hit.score >= 1
          @results[course.id] = hit.score.nil? ? 1 : 5 * hit.score
        end
      end
    end


    # Hack solution to make it extremely fast (like... upwards of 100s of times faster)
    # could also organize the db along some pattern for getting these.
    if divs.any?
      # key = [[2, 3, 7, 10, 11, 13, 16, 19, 20, 22, 25, 33, 47, 49, 51, 52, 60, 61, 71, 79, 81, 85, 86, 91, 92, 96, 98, 102, 103, 106, 107, 108, 132, 159, 160, 161, 162, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 271, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 386, 389, 391, 392, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 730, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058],
      #        [1, 4, 5, 6, 8, 9, 12, 14, 15, 17, 18, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 87, 88, 89, 90, 93, 94, 95, 97, 99, 100, 101, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 172, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 387, 388, 390, 393, 394, 411, 412, 413, 414, 415, 424, 437, 439, 443, 444, 458, 460, 487, 488, 489, 490, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 625, 637, 638, 640, 641, 642, 643, 649, 650, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067],
      #        [229, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 692, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 855, 856, 857, 858, 859, 860, 861, 862, 880, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906]]

      #  All divs, ignoring semester
      key = [[1, 10, 12, 13, 14, 35, 36, 38, 41, 50, 59, 62, 63, 64, 65, 72, 74, 75, 83, 97, 98, 101, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 313, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894],
        [2, 3, 4, 5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 137, 142, 147, 148, 153, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 314, 315, 317, 333, 334, 335, 336, 337, 350, 358, 366, 379, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 483, 511, 519, 520, 521, 522, 524, 525, 527, 528, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 641, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 881, 895, 896, 897, 898, 899, 900, 901, 902, 903],
        [94, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 512, 513, 514, 516, 517, 518, 526, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 610, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 707, 708, 709, 710, 711, 712, 713, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758] ]

      # Filter by semester if needed
      #key.each do |k|
      #  subtract(ks, semester) if semester
      #end

      divs.each do |div|
        key[div - 1].each do |id|
          @results[id] = @results[id].nil? ? 2 : @results[id] * 2
        end
      end
    end

    if dists.any?
      # key = {:q => [229, 317, 319, 322, 328, 329, 334, 335, 346, 351, 360, 361, 362, 363, 364, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 509, 510, 513, 517, 519, 520, 521, 522, 527, 529, 531, 532, 543, 556, 560, 630, 634, 656, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 801, 802, 803, 804, 805, 806, 809, 810, 869, 880, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 907, 913, 922, 960],
      #        :w => [1, 3, 5, 15, 16, 20, 22, 35, 38, 41, 42, 51, 56, 61, 62, 63, 74, 75, 79, 81, 82, 96, 98, 99, 100, 101, 106, 108, 111, 123, 127, 130, 135, 136, 139, 150, 164, 165, 169, 194, 195, 198, 259, 260, 261, 274, 275, 302, 318, 320, 321, 330, 340, 352, 371, 390, 392, 393, 394, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 441, 445, 516, 518, 526, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 602, 608, 611, 635, 641, 657, 672, 673, 674, 680, 681, 682, 683, 684, 703, 705, 715, 716, 724, 745, 747, 755, 756, 757, 795, 832, 836, 837, 863, 864, 865, 866, 867, 870, 872, 874, 875, 876, 877, 878, 879, 881, 882, 884, 885, 919, 929, 935, 936, 939, 941, 942, 950, 969, 970, 974, 1033, 1045, 1059, 1061],
      #        :d => [2, 4, 9, 12, 15, 18, 21, 22, 23, 25, 27, 30, 31, 33, 38, 42, 43, 46, 47, 48, 49, 51, 52, 55, 60, 64, 65, 66, 69, 77, 78, 79, 83, 89, 90, 95, 97, 99, 100, 103, 105, 108, 111, 112, 113, 114, 121, 124, 128, 130, 131, 139, 151, 163, 180, 183, 219, 258, 271, 272, 275, 280, 281, 282, 283, 284, 285, 286, 287, 295, 296, 298, 299, 300, 303, 304, 305, 306, 392, 418, 420, 433, 440, 445, 458, 459, 502, 542, 577, 604, 614, 673, 683, 691, 700, 710, 713, 715, 716, 730, 736, 819, 823, 832, 837, 881, 974, 1029, 1033, 1059, 1060, 1061]}
      key = {:q => [250, 251, 254, 260, 261, 266, 267, 271, 277, 278, 290, 291, 292, 293, 294, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 406, 407, 410, 413, 415, 416, 417, 420, 426, 427, 428, 429, 430, 431, 437, 441, 443, 454, 538, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 662, 663, 664, 665, 666, 669, 724, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 759, 772, 804],
             :w => [3, 4, 5, 8, 11, 13, 14, 31, 35, 41, 45, 51, 59, 63, 64, 65, 71, 74, 76, 82, 83, 85, 94, 95, 99, 103, 104, 105, 106, 107, 119, 121, 122, 123, 137, 139, 144, 149, 153, 165, 167, 194, 195, 222, 233, 252, 262, 272, 287, 299, 315, 317, 339, 340, 341, 346, 348, 349, 351, 352, 353, 355, 358, 359, 362, 368, 369, 412, 414, 432, 437, 439, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 478, 479, 480, 482, 483, 487, 491, 500, 519, 539, 555, 569, 570, 571, 572, 589, 598, 599, 600, 601, 619, 627, 690, 691, 692, 700, 714, 715, 716, 717, 718, 719, 720, 721, 722, 726, 729, 733, 734, 735, 770, 780, 782, 784, 785, 787, 790, 814, 895, 897],
             :d => [1, 2, 3, 4, 7, 9, 12, 14, 17, 18, 19, 23, 25, 29, 30, 35, 37, 39, 41, 42, 44, 49, 50, 52, 53, 54, 56, 58, 59, 61, 66, 67, 69, 70, 73, 76, 78, 81, 82, 83, 84, 91, 94, 98, 99, 104, 105, 116, 119, 136, 137, 138, 139, 147, 149, 153, 158, 163, 167, 169, 196, 197, 202, 210, 211, 212, 213, 215, 216, 217, 218, 219, 227, 228, 231, 232, 234, 235, 236, 237, 238, 239, 265, 340, 350, 354, 368, 370, 376, 378, 414, 459, 473, 480, 508, 571, 572, 580, 587, 593, 595, 600, 611, 619, 677, 678, 679, 686, 692, 729, 846, 864, 869, 870, 871, 872, 874, 875, 895, 896, 897]}
      dists.each do |dist|
        key[dist].each do |id|
          @results[id] = @results[id].nil? ? 2 : @results[id] * 2
         end
      end
    end

    # Check if there is any point to sorting (more than 1 thingy specified or multiple thingies for a single thingy)
    #if divs.size > 1 || dists.size > 1 || (divs.size > 0 && dists.size > 0) || params[:search]
    if divs.size + dists.size >= 2 || params[:search]

      # shoudl randomize tiebreaker
      @results = @results.sort_by { |k,v| -(v || 0) }      
      @results = Hash[@results.map {|key, value| [key, value]}]

      serendipity = params[:serendipity]

      if !params[:search].nil? && !serendipity.nil? && (serendipity = serendipity.to_i) > 0
        @results = serendipitize(@results, serendipity)
      end

      @results = @results.to_a

    end

    # Optionally perform a semester filter
    if divs.any? || !params[:search].blank? || dists.any?
      # Some other filters exist, AND semester 
      filter_semester(@results, semester) if semester
    else
      # No filters
      if semester.nil?
        blob = Array(1..903)
      elsif semester.downcase == "fall"
        blob = [1, 3, 5, 6, 8, 13, 17, 19, 21, 22, 24, 25, 26, 27, 29, 31, 32, 33, 36, 39, 40, 41, 42, 43, 45, 47, 49, 50, 53, 55, 58, 59, 62, 66, 67, 68, 71, 72, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 91, 92, 93, 96, 98, 99, 101, 102, 103, 104, 109, 111, 113, 116, 123, 124, 126, 127, 128, 130, 132, 134, 136, 138, 139, 140, 143, 145, 148, 150, 152, 153, 154, 156, 161, 162, 164, 166, 171, 173, 176, 178, 181, 183, 184, 187, 188, 189, 192, 195, 197, 199, 202, 203, 204, 206, 208, 210, 212, 215, 216, 218, 220, 223, 225, 227, 229, 230, 231, 234, 236, 238, 240, 242, 244, 246, 248, 250, 251, 252, 255, 257, 259, 260, 263, 265, 266, 267, 270, 274, 275, 277, 280, 282, 284, 285, 286, 287, 288, 291, 292, 293, 295, 296, 300, 301, 305, 307, 309, 311, 314, 315, 318, 320, 322, 324, 326, 327, 329, 332, 333, 334, 336, 339, 340, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 356, 358, 359, 362, 363, 364, 368, 371, 373, 374, 376, 378, 381, 383, 385, 386, 387, 388, 389, 391, 397, 398, 399, 401, 402, 404, 406, 407, 409, 412, 414, 415, 416, 417, 418, 426, 433, 434, 436, 439, 440, 441, 444, 446, 448, 449, 450, 451, 452, 453, 458, 460, 462, 463, 464, 465, 467, 469, 470, 474, 478, 482, 483, 484, 486, 488, 492, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 516, 517, 523, 524, 525, 527, 528, 529, 532, 533, 537, 538, 540, 541, 542, 544, 546, 548, 550, 553, 556, 558, 560, 561, 562, 564, 565, 567, 570, 572, 574, 575, 577, 579, 581, 582, 583, 588, 589, 590, 592, 593, 598, 600, 602, 603, 605, 607, 608, 611, 612, 614, 616, 617, 618, 620, 622, 623, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 645, 646, 648, 649, 650, 651, 653, 654, 656, 658, 660, 662, 663, 664, 665, 667, 670, 671, 673, 674, 675, 677, 678, 679, 680, 682, 687, 689, 692, 693, 694, 695, 696, 699, 701, 703, 705, 708, 709, 712, 714, 715, 718, 719, 722, 726, 727, 732, 735, 736, 737, 739, 741, 742, 744, 746, 747, 750, 752, 755, 757, 759, 760, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 777, 778, 781, 782, 785, 788, 790, 791, 794, 795, 796, 797, 799, 801, 803, 804, 806, 807, 808, 810, 811, 814, 816, 818, 819, 821, 822, 824, 831, 832, 834, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 864, 865, 867, 869, 871, 874, 876, 877, 879, 881, 883, 885, 887, 888, 889, 890, 893, 895, 897, 898, 900, 902]
      elsif semester.downcase == "spring"
        blob = [2, 4, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 23, 28, 30, 34, 35, 37, 38, 44, 46, 48, 49, 51, 52, 54, 56, 57, 60, 61, 63, 64, 65, 69, 70, 73, 74, 80, 82, 85, 87, 88, 90, 91, 94, 95, 97, 100, 105, 106, 107, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 129, 131, 133, 135, 137, 141, 142, 144, 146, 147, 149, 151, 155, 157, 158, 159, 160, 163, 164, 165, 167, 168, 169, 170, 172, 174, 175, 177, 179, 180, 182, 185, 186, 190, 191, 193, 194, 196, 198, 200, 201, 205, 207, 209, 211, 213, 214, 217, 219, 221, 222, 224, 226, 228, 232, 233, 235, 237, 239, 241, 243, 245, 247, 249, 253, 254, 256, 258, 259, 261, 262, 264, 265, 268, 269, 271, 272, 273, 274, 276, 278, 279, 281, 283, 289, 290, 294, 297, 298, 299, 302, 303, 304, 306, 308, 310, 312, 313, 316, 317, 319, 321, 323, 325, 328, 330, 331, 335, 337, 338, 341, 349, 350, 351, 355, 357, 360, 361, 365, 366, 367, 369, 370, 372, 375, 377, 379, 380, 382, 384, 386, 387, 388, 390, 392, 393, 394, 395, 396, 400, 403, 405, 406, 407, 408, 410, 411, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 435, 437, 438, 442, 443, 445, 447, 454, 455, 456, 457, 459, 461, 463, 466, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 485, 486, 487, 489, 490, 491, 493, 494, 495, 496, 497, 505, 506, 510, 512, 514, 515, 518, 519, 520, 521, 522, 526, 528, 530, 531, 534, 535, 536, 537, 539, 543, 545, 547, 549, 551, 552, 554, 555, 557, 559, 563, 566, 568, 569, 571, 573, 576, 578, 579, 580, 584, 585, 586, 587, 589, 591, 594, 595, 596, 597, 599, 601, 604, 606, 609, 610, 613, 615, 619, 621, 624, 628, 630, 634, 635, 636, 638, 639, 640, 641, 643, 644, 646, 647, 648, 652, 655, 657, 659, 661, 662, 663, 666, 668, 669, 670, 672, 676, 681, 683, 684, 685, 686, 688, 690, 691, 693, 694, 695, 696, 697, 698, 700, 702, 704, 706, 707, 710, 711, 713, 716, 717, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 733, 734, 738, 740, 743, 745, 748, 749, 751, 753, 754, 756, 758, 761, 763, 766, 767, 768, 769, 771, 775, 776, 779, 780, 783, 784, 786, 787, 789, 792, 793, 794, 798, 800, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 815, 817, 820, 823, 825, 826, 827, 828, 829, 830, 833, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 863, 866, 868, 870, 872, 873, 875, 878, 880, 882, 884, 886, 889, 891, 892, 894, 895, 896, 899, 901, 903]
      end
      @results = blob.map { |i| [i, 1] }
    end


    t2 = Time.now
    @elapsed = (t2 - t1) * 1000.0

    respond_to do |format|
      format.js {}
    end

  end


  def info_for_result
    match = Course.find_by(id: params[:id])
    # Return only the necessary info to save time    
    @course = {:dept   => match.primary_department.abbreviation,
               :number => match.number,
               :title  => match.title,
               #:q      => match.q,
               #:w      => match.w,
               #:d      => match.d,
               #:div    => match.division, 
               :teaser => match.teaser,
               :id     => match.id }
    render json: @course
  end


  def lookup
    @course = Course.find_by(id: params[:id])
    respond_to do |format|
      format.js {}
    end
  end



  private


  def filter_semester(arr, semester)
    if semester.nil?
      return
    elsif semester.downcase == "fall"
      filter = [1, 3, 5, 6, 8, 13, 17, 19, 21, 22, 24, 25, 26, 27, 29, 31, 32, 33, 36, 39, 40, 41, 42, 43, 45, 47, 49, 50, 53, 55, 58, 59, 62, 66, 67, 68, 71, 72, 75, 76, 77, 78, 79, 81, 83, 84, 86, 89, 91, 92, 93, 96, 98, 99, 101, 102, 103, 104, 109, 111, 113, 116, 123, 124, 126, 127, 128, 130, 132, 134, 136, 138, 139, 140, 143, 145, 148, 150, 152, 153, 154, 156, 161, 162, 164, 166, 171, 173, 176, 178, 181, 183, 184, 187, 188, 189, 192, 195, 197, 199, 202, 203, 204, 206, 208, 210, 212, 215, 216, 218, 220, 223, 225, 227, 229, 230, 231, 234, 236, 238, 240, 242, 244, 246, 248, 250, 251, 252, 255, 257, 259, 260, 263, 265, 266, 267, 270, 274, 275, 277, 280, 282, 284, 285, 286, 287, 288, 291, 292, 293, 295, 296, 300, 301, 305, 307, 309, 311, 314, 315, 318, 320, 322, 324, 326, 327, 329, 332, 333, 334, 336, 339, 340, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 356, 358, 359, 362, 363, 364, 368, 371, 373, 374, 376, 378, 381, 383, 385, 386, 387, 388, 389, 391, 397, 398, 399, 401, 402, 404, 406, 407, 409, 412, 414, 415, 416, 417, 418, 426, 433, 434, 436, 439, 440, 441, 444, 446, 448, 449, 450, 451, 452, 453, 458, 460, 462, 463, 464, 465, 467, 469, 470, 474, 478, 482, 483, 484, 486, 488, 492, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 516, 517, 523, 524, 525, 527, 528, 529, 532, 533, 537, 538, 540, 541, 542, 544, 546, 548, 550, 553, 556, 558, 560, 561, 562, 564, 565, 567, 570, 572, 574, 575, 577, 579, 581, 582, 583, 588, 589, 590, 592, 593, 598, 600, 602, 603, 605, 607, 608, 611, 612, 614, 616, 617, 618, 620, 622, 623, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 645, 646, 648, 649, 650, 651, 653, 654, 656, 658, 660, 662, 663, 664, 665, 667, 670, 671, 673, 674, 675, 677, 678, 679, 680, 682, 687, 689, 692, 693, 694, 695, 696, 699, 701, 703, 705, 708, 709, 712, 714, 715, 718, 719, 722, 726, 727, 732, 735, 736, 737, 739, 741, 742, 744, 746, 747, 750, 752, 755, 757, 759, 760, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 777, 778, 781, 782, 785, 788, 790, 791, 794, 795, 796, 797, 799, 801, 803, 804, 806, 807, 808, 810, 811, 814, 816, 818, 819, 821, 822, 824, 831, 832, 834, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 864, 865, 867, 869, 871, 874, 876, 877, 879, 881, 883, 885, 887, 888, 889, 890, 893, 895, 897, 898, 900, 902]
    elsif semester.downcase == "spring"
      filter = [2, 4, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 23, 28, 30, 34, 35, 37, 38, 44, 46, 48, 49, 51, 52, 54, 56, 57, 60, 61, 63, 64, 65, 69, 70, 73, 74, 80, 82, 85, 87, 88, 90, 91, 94, 95, 97, 100, 105, 106, 107, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 129, 131, 133, 135, 137, 141, 142, 144, 146, 147, 149, 151, 155, 157, 158, 159, 160, 163, 164, 165, 167, 168, 169, 170, 172, 174, 175, 177, 179, 180, 182, 185, 186, 190, 191, 193, 194, 196, 198, 200, 201, 205, 207, 209, 211, 213, 214, 217, 219, 221, 222, 224, 226, 228, 232, 233, 235, 237, 239, 241, 243, 245, 247, 249, 253, 254, 256, 258, 259, 261, 262, 264, 265, 268, 269, 271, 272, 273, 274, 276, 278, 279, 281, 283, 289, 290, 294, 297, 298, 299, 302, 303, 304, 306, 308, 310, 312, 313, 316, 317, 319, 321, 323, 325, 328, 330, 331, 335, 337, 338, 341, 349, 350, 351, 355, 357, 360, 361, 365, 366, 367, 369, 370, 372, 375, 377, 379, 380, 382, 384, 386, 387, 388, 390, 392, 393, 394, 395, 396, 400, 403, 405, 406, 407, 408, 410, 411, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 435, 437, 438, 442, 443, 445, 447, 454, 455, 456, 457, 459, 461, 463, 466, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 485, 486, 487, 489, 490, 491, 493, 494, 495, 496, 497, 505, 506, 510, 512, 514, 515, 518, 519, 520, 521, 522, 526, 528, 530, 531, 534, 535, 536, 537, 539, 543, 545, 547, 549, 551, 552, 554, 555, 557, 559, 563, 566, 568, 569, 571, 573, 576, 578, 579, 580, 584, 585, 586, 587, 589, 591, 594, 595, 596, 597, 599, 601, 604, 606, 609, 610, 613, 615, 619, 621, 624, 628, 630, 634, 635, 636, 638, 639, 640, 641, 643, 644, 646, 647, 648, 652, 655, 657, 659, 661, 662, 663, 666, 668, 669, 670, 672, 676, 681, 683, 684, 685, 686, 688, 690, 691, 693, 694, 695, 696, 697, 698, 700, 702, 704, 706, 707, 710, 711, 713, 716, 717, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 733, 734, 738, 740, 743, 745, 748, 749, 751, 753, 754, 756, 758, 761, 763, 766, 767, 768, 769, 771, 775, 776, 779, 780, 783, 784, 786, 787, 789, 792, 793, 794, 798, 800, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 815, 817, 820, 823, 825, 826, 827, 828, 829, 830, 833, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 863, 866, 868, 870, 872, 873, 875, 878, 880, 882, 884, 886, 889, 891, 892, 894, 895, 896, 899, 901, 903]
    end
    subtract(arr, filter)
  end


  # arr is a [[1,2], [7,5]] style array. Remove el if el[0] not in filter. Both ordered
  def subtract(arr, filter)

    a = arr.length - 1
    f = filter.length - 1
    
    while a >= 0
      if (a >= 0 && f < 0) || arr[a][0] > filter[f] 
        arr.delete_at(a)
        a -= 1
      elsif arr[a][0] < filter[f]
        f -= 1              
      else        
        a -= 1
        f -= 1
      end
    end
    
  end



  def serendipitize(results, serendipity)
    limit = [30, results.size].min

    # Take top from @results
    temp = []
    i = 0
    low = 0 # used to figure out lower bound on the top <limit> scores
    results.each do |course, score|
      temp.push(course)
      low = score
      if i >= limit
        break
      end
      i += 1
    end

    (limit / 10).times do |i|
      serendipity.times do
        # get the course
        random = 1 + rand(1067)
        if !results.include?(random) || results[random].to_i < low # check it isnt in the top <limit> already
          temp.insert(i * 10 + rand(10), random)
          results[random] = -1 # mark it as a serendipity course
        end
      end
    end

    x = Hash.new
    temp.each { |course| x[course] = results[course] }
    return x    
  end

end